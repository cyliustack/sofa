#!/usr/bin/python3.6
import argparse
import csv
import glob
import json
import multiprocessing as mp
import os
import sys
from functools import partial
from pathlib import Path

import numpy as np

from sofa_analyze import *
from sofa_config import *
from sofa_hsg import sofa_swarm_diff
from sofa_preprocess import *
from sofa_print import *
from sofa_record import *
from sofa_viz import *

if __name__ == "__main__":
    cfg = SOFA_Config()
    command = None
    usr_command = None
    # swarm_diff needs multiple input argument, deal with it independently
    swarm_diff_command = None
    sys.stdout.flush()

    print_hint("Welcome to SOFA! Your Python version is %s.%s.%s" % sys.version_info[:3])
    if sys.version_info < (3,5) :
        print_error("But SOFA requires minimum version of Python 3.5.")
        sys.exit(1)

    parser = argparse.ArgumentParser(description='SOFA')
    parser.add_argument(
        '--logdir',
        metavar='/path/to/logdir/',
        type=str,
        required=False,
        help='path to the directory of SOFA logged files')
    parser.add_argument(
        '--gpu_filters',
        metavar='"keyword1:color1,keyword2:color2"',
        type=str,
        required=False,
        help='A string of list of pairs of keyword and color')
    parser.add_argument(
        '--cpu_filters',
        metavar='"keyword1:color1,keyword2:color2"',
        type=str,
        required=False,
        help='A string of list of pairs of keyword and color')
    parser.add_argument(
        '--cluster_ip',
        metavar='"192.168.0.1,192.168.0.2"',
        type=str,
        required=False,
        help='cluster ip is designed for cluster sofa report')
    parser.add_argument('--cpu_top_k', metavar='N', type=int, required=False,
                        help='K functions of the highest overheads')
    parser.add_argument('--num_iterations', metavar='N', type=int, required=False,
                        help='number of iterations by which a program runs')
    parser.add_argument('--num_swarms', metavar='N', type=int, required=False,
                        help='number of iterations by which a program runs')
    parser.add_argument('--cpu_time_offset_ms', metavar='N', type=int, required=False,
            help='timestamp offset (unit: ms) between CPU and GPU, +N or -N')
    parser.add_argument('--strace_min_time', metavar='F', type=float, required=False,
            help='strace records whose durations less than this limit will not be processed in the following stages. (unit: s)')
    parser.add_argument(
        '--plot_ratio',
        metavar='N',
        type=int,
        required=False,
        help='Down-sample ratio for points in scatter plot: 1, 10, 100, etc..')
    parser.add_argument(
        '--viz_port',
        metavar='N',
        type=int,
        required=False,
        help='Specify port of web server for browsing visualization results')
    parser.add_argument('--profile_all_cpus', dest='profile_all_cpus', action='store_true')
    parser.set_defaults(profile_all_cpus=False)
    parser.add_argument('--verbose', dest='verbose', action='store_true')
    parser.set_defaults(verbose=False)
    parser.add_argument('--enable_aisi', dest='enable_aisi', action='store_true')
    parser.set_defaults(enable_aisi=False)
    parser.add_argument('--enable_strace', dest='enable_strace', action='store_true')
    parser.set_defaults(enable_strace=False)
    parser.add_argument('--aisi_via_strace', dest='aisi_via_strace', action='store_true')
    parser.set_defaults(aisi_via_strace=False)
    parser.add_argument('--display_swarms', dest='display_swarms', action='store_true')
    parser.set_defaults(display_swarms=False)
    parser.add_argument('--base_logdir', dest='base_logdir', default='')
    parser.add_argument('--match_logdir', dest='match_logdir', default='')
    parser.add_argument('--hsg_multifeatures', dest='hsg_multifeatures', action='store_true')
    parser.set_defaults(hsg_multifeatures=False)
    parser.add_argument('--enable_vmstat', dest='enable_vmstat', action='store_true')
    parser.set_defaults(enable_aisi=False)
    parser.add_argument('--skip_preprocess', dest='skip_preprocess', action='store_true')
    parser.set_defaults(skip_preprocess=False)
    parser.add_argument('--pid', metavar='PID', type=int, required=False,
                        help='Specify the PID of the process you want to trace')
    parser.add_argument('--timeout', metavar='T', type=int, required=False,
                        help='Timeout of SOFA recording')

    parser.add_argument(
        'command',
        type=str,
        nargs=1,
        metavar='<stat|record|report|preprocess|analyze|diff|viz|clean>')
    parser.add_argument(
        'usr_command',
        type=str,
        nargs='?',
        metavar='<PROFILED_COMMAND>')
    parser.add_argument(
        '--network_filters',
        metavar='"ip1,ip2,ip3"',
        type=str,
        required=False,
        help='filters for network, put your ip into it, eg.192.168.0.100 is 192168000100, and first ip must be your localhost')
    parser.add_argument('--enable_pcm', dest='enable_pcm', action='store_true')
    parser.set_defaults(enable_pcm=False)
    parser.add_argument('--cuda_api_tracing', dest='cuda_api_tracing', action='store_true')
    parser.set_defaults(cuda_api_tracing=False)
    parser.add_argument(
        '--perf_events',
        metavar='"cycles,instructions,cache-misses"',
        type=str,
        required=False,
        help='Declare which perf events are going to be recorded')
    parser.add_argument(
        '--potato_server',
        metavar='"ip:port"',
        type=str,
        required=False,
        help='IP address of POTATO server')
    parser.add_argument('--absolute_timestamp', dest='absolute_timestamp', action='store_true')
    parser.set_defaults(absolute_timestamp=False)

    sofa_exec_path = os.path.abspath( __file__ )
    if Path(sofa_exec_path).is_symlink():
        cfg.script_path = os.path.dirname(os.readlink(sofa_exec_path))
    else:
        cfg.script_path = os.path.dirname(sofa_exec_path)

    args = parser.parse_args()
    if args.logdir is not None:
        cfg.logdir = args.logdir + '/'

    if args.command is not None:
        command = args.command[0]
    
    if args.usr_command is not None:
        usr_command = args.usr_command

    if args.verbose is not None:
        cfg.verbose = args.verbose

    if args.enable_aisi is not None:
        cfg.enable_aisi = args.enable_aisi

    if args.enable_strace is not None:
        cfg.enable_strace = args.enable_strace

    if args.aisi_via_strace is not None:
        cfg.aisi_via_strace = args.aisi_via_strace

    if args.hsg_multifeatures is not None:
        cfg.hsg_multifeatures = args.hsg_multifeatures
    
    if args.display_swarms is not None:
        cfg.display_swarms = args.display_swarms

    # swarm_diff related flag
    if command == 'diff': # reject '' and None
        if args.base_logdir and args.match_logdir: 
        #if args.base_logdir and args.match_logdir and os.path.isfile( os.path.join(args.base_logdir, 'auto_caption.csv')) and \
        #os.path.isfile( os.path.join(args.match_logdir, 'auto_caption.csv')):
            # for item in args.swarm_diff: # type of args.swarm_diff: list
            #     if 'base_logdir' in item:
            #         base_logdir = item
            #     elif 'match_logdir' in item:
            #         match_logdir = item
            #     else:
            #         pass # do nothing
            # base_logdir = base_logdir.split("=")
            # cfg.base_logdir = base_logdir[1] # path is the rear
            cfg.base_logdir = args.base_logdir + '/'
            print(cfg.base_logdir)
            # match_logdir = match_logdir.split("=") # path is the rear
            # cfg.match_logdir = match_logdir[1]
            cfg.match_logdir = args.match_logdir + '/'
            print(cfg.match_logdir)
        else:
            print_error("{base_logdir,match_logdir}/auto_caption.csv must exist!")
            sys.exit(1)

    if args.enable_vmstat is not None:
        cfg.enable_vmstat = args.enable_vmstat

    if args.enable_pcm is not None:
        cfg.enable_pcm = args.enable_pcm

    if args.cuda_api_tracing is not None:
        cfg.cuda_api_tracing = args.cuda_api_tracing

    if args.num_iterations is not None:
        cfg.num_iterations = args.num_iterations

    if args.pid is not None:
        cfg.pid = args.pid

    if args.timeout is not None:
        cfg.timeout = args.timeout

    if args.num_swarms is not None:
        cfg.num_swarms = args.num_swarms

    if args.plot_ratio is not None:
        cfg.plot_ratio = args.plot_ratio

    if args.cpu_time_offset_ms is not None:
        cfg.cpu_time_offset = 0.001*args.cpu_time_offset_ms
    else:
        cfg.cpu_time_offset = 0.0

    if args.strace_min_time is not None:
        cfg.strace_min_time = args.strace_min_time

    else:
        cfg.strace_min_time = 1e-6


    if args.viz_port is not None:
        cfg.viz_port = args.viz_port

    if args.cluster_ip is not None:
        cfg.cluster_ip = args.cluster_ip

    if args.profile_all_cpus is not None:
        cfg.profile_all_cpus = args.profile_all_cpus

    if args.cpu_filters is not None:
        pairs = args.cpu_filters.split(',')
        for pair in pairs:
            cfg.cpu_filters.append(
                Filter(str(pair.split(':')[0]), str(pair.split(':')[1])))
    else:
        cfg.cpu_filters.append(Filter('idle', 'black'))

    if args.potato_server is not None:
        cfg.potato_server = args.potato_server

    cfg.gpu_filters.append(Filter('CUDA_COPY_H2D', 'Red'))
    cfg.gpu_filters.append(Filter('CUDA_COPY_D2H', 'Peru'))
    cfg.gpu_filters.append(Filter('CUDA_COPY_P2P', 'Purple'))
    if cfg.cuda_api_tracing:
        cfg.gpu_filters.append(Filter('CUDA_API', 'DarkSlateGray'))
    if args.gpu_filters is not None:
        pairs = args.gpu_filters.split(',')
        for pair in pairs:
            cfg.gpu_filters.append(
                Filter(str(pair.split(':')[0]), str(pair.split(':')[1])))
    else:
        cfg.gpu_filters.append(Filter('_fw_', 'royalblue'))
        cfg.gpu_filters.append(Filter('_bw_', 'darkviolet'))
        cfg.gpu_filters.append(Filter('AllReduceKernel', 'indigo'))

    if args.network_filters is not None:
        pairs = args.network_filters.split(',')
        for pair in pairs:
            cfg.net_filters.append(pair)

    if args.perf_events is not None:
        cfg.perf_events = args.perf_events

    if args.absolute_timestamp is not None:
        cfg.absolute_timestamp = args.absolute_timestamp

    print_info(cfg, "Ratio of raw data points to plotting points : %d" % cfg.plot_ratio)
    for filter in cfg.cpu_filters:
        print_info(cfg,"CPU filter = %s:%s" % (filter.keyword, filter.color))
    for filter in cfg.gpu_filters:
        print_info(cfg,"GPU filter = %s:%s" % (filter.keyword, filter.color))

    print_info(cfg,"logdir = %s" % cfg.logdir)

    if command == 'stat':
        sofa_record(usr_command, cfg)
        sofa_preprocess(cfg)
        sofa_analyze(cfg)
    elif command == 'record':
        sofa_record(usr_command, cfg)
    elif command == 'preprocess':
        sofa_preprocess(cfg)
    elif command == 'analyze':
        sofa_analyze(cfg)
    elif command == 'diff': # register a new command here
        return_df = pd.DataFrame() # create an empty dataframe
        if not args.skip_preprocess:
            cfg.logdir = cfg.base_logdir 
            sofa_preprocess(cfg)
            cfg.logdir = cfg.match_logdir 
            sofa_preprocess(cfg)
        return_df = sofa_swarm_diff(cfg)
    elif command == 'viz':
        sofa_viz(cfg)
    elif command == 'clean':
        sofa_clean(cfg)
    elif command == 'report':
        if cfg.cluster_ip:
            sofa_preprocess(cfg)
            cluster_analyze(cfg)
        else:
            sofa_preprocess(cfg)
            sofa_analyze(cfg)
            sofa_viz(cfg)
    else:
        print_error("Cannot recognized SOFA-command [%s]" % command)
        sys.exit(1)
